


{%comment%}
<section>
<!--Challenge 1 -->

{% assign greeting = "hello world!!!" %}

<!-- 
a.) Render the variable "greeting" in a h1-element  
-->
 

<!-- 
b.) Copy the h1-tag and use a Liquid filter to turn each letter into a capital letter. 
-->


<!-- 
c.) Copy the h1-tag again and chain another Liquid filter remove all the exclamation marks. 
-->



<!-- End Challenge 1 -->
</section>
{%endcomment%}








{%comment%}
<section>
<!--Challenge 2 -->

<!-- Render a test image using the following variables (full url: http://lorempixel.com/400/200/sports) -->
  
{% assign base_url = "https://lorempixel.com" %}

{% assign img_dimensions = "/400/200/" %}

{%assign img_category ="sports" %}
  
  
<!-- 
a.) Find a way to build the URL back together and put it out to the frontend.
Then also create a new variable containing the full image url.
-->
  
 
  

<!-- 
b.) Display the image using an HTML Image Tag 
-->



<!-- 
c.) Copy the image tag and this time use a filter to replace the image category "sports" with "nature" 
-->


  
<!-- 
d.) Answer the following question:
Did the replace filter permanently modify the variable itself or did it just affect the output once?
-->
  
 
  
<!-- 
e.) Find a way to change the value of the variable and set the category to "cats".
Then put out the image again.
-->
  
  


<!-- End Challenge 2 -->
</section>
{%endcomment%}







{%comment%}
<section>
<!--Challenge 3 -->

<!-- 
a.) Create an H1 element that displays the amount of items in the cart
(You can test it by adding products to the cart and going back to the homepage)
-->
  
  <h1> Your cart contains X item(s) </h1>
  
  
<!-- 
b.) Use the "pluralize" filter to display the word "item" or "items" depending on the amount of items.
-->
  

  
<!-- 
c.) Write an if / else statement for the following cases:

- Cart is empty → <h1>Your cart is currently empty</h1>
- Cart contains items → <h1> Your cart contains X item(s) </h1>

Hint: 
In almost every programming language we use a single equal sign for assigning values

-> myVariable = 5

and double equal sings to compare values
-> if myVariable == 5 ....
-->

  

  

<!-- 
d.) Rework your "if/else" statement and use "unless/else" tags instead 
-->
  
  
  
  
  
<!-- End Challenge 3 -->
</section>
{%endcomment%}








{%comment%}
<section>
<!--Challenge 4 -->
  
<!-- 
a.) Put out "<h6> hello world </h6>" 10 Times without copy-pasting and by using a for tag
-->
  

  
  
  <!-- 
b.) Append the current iteration number to the output

i.e:
hello world 1
hello world 2
hello world 3
...
-->
  
  

  
  <!-- 
c.) Skip the 4th element using the "continue" keyword
-->
  

  
  
  <!-- 
d.) Cancle the iteration after the 8th element using the "break" keyword.
-->
  
  
  
  
<!-- End Challenge 4 -->
</section>
{%endcomment%}







{%comment%}

<section>
<!--Challenge 5 -->
 
<!-- 

Oftentimes for-loops are used to iterate over the elements in an "array".

You can think of an "array" as if it was a table / or a simple list containing data. 

For example an array of four different fruits could look like:

0 → apples

1 → oranges

2 → lemons

3 → bananas


(the first index usually starts with 0, because historically it wa more memory efficient than starting with a 1)


In liquid, we can't just create arrays, but we encounter them in several of the liquid objects.
For instance a collection is an array / "a list" of different products

A product may have an array / "a list" of different images

A product may also have an array/ "a list" of different product tags

A product may have an array/ "a list" of different variants

A customer might have an array/ "a list" of different items in the cart



There's only one exception/workaround in Liquid, that allows us to create a simple array containing text elements.

It works by using the split filter as follows:

{% assign fruits_string = "apples,oranges,lemons,bananas" %}

{% assign fruits_array = fruits_string | split: ',' %}

-->  
  
  
<!-- 
a.) Put out the thrid element of our fruits array "lemons" in a h6 tag
-->
  

  
  
  
  <!-- 
b.) display the array size (number of elements in it).

-->
  
  
  
  
  <!-- 
c.) write a for loop that puts out each of the array elements in a seperate <h6> element. Use the code below as a starting point.
-->

  
{%comment%}
  
  {% for i in (0..X) %}

  <h6> X </h6>

  {% endfor%}
  
{%endcomment%}
  
  
  
  <!-- 
d.) Unfortunately the implementation above is not very dynamic.

If we add another fruit to the end of our array. It won't be displayed.

Therefore we want to create a new variable that dynamically figures out the upper limit and then use it in out forloop.
-->
  

  {%comment%}
  {% assign fruits_string = "apples,oranges,lemons,bananas,strawberries" %}

  {% assign fruits_array = fruits_string | split: ',' %}



  {% assign array_limit = X %}

  {% for i in (0..X) %}

  <h6> X </h6>

  {% endfor %}
  {%endcomment%}
  

  
  
  <!-- 
e.) The dynamic example already works a lot better, but there's one way, that's a little handier.

The most common way to iterate over arrays is by using a "for-each loop".

Instead of a numerical counter, we can directly reference the element in an array:



 for element in array

	→ do something with element

 endfor

Or in plain English: "for each element in our array → do something with the current element" 

Please fill in the blanks to put out each fruit into an <h6> tag:
-->
  


  {% assign fruits_string = "apples,oranges,lemons,bananas,strawberries,abc" %}

  {% assign fruits_array = fruits_string | split: ',' %}
  
  

 
  {%comment%}
  
  
  {% for fruit in fruits_array %}

  <h6> X </h6>

  {% endfor%}
  
  
  {%endcomment%}

  
  
  <!-- 
f.) find a way to put out the number (index) of the current iteration in our for-each-loop.

hint: You can either introduce a counter variable, or research the liquid "forloop index".

-->
  

 
  
  
<!-- End Challenge 5 -->
</section>
{%endcomment%}








{%comment%}
<section>
<!-- Challenge 6 -->

<!-- 
a.)  Create an <ul> element, that holds all the existing store collection titles as individual list items 
-->
  

  
<!-- 
b.)  Instead of just displying the title, each of the elements should now be a clickable link and point to the collection
-->
  
  


<!-- 
c.) One of the Store collections is called "Home Page" (if you don't have that please go ahead to create it first).

This collection is only meant to be shown as a featured collection on the homepage, but shouldn't be browsed. 

Find a way to remove it from our list of collections / filter it out.
-->
  



<!-- End Challenge 6 -->
</section>

{%endcomment%}






{%comment%}
<section>
<!-- Challenge 7 -->
  
<!-- 
Unlike with collections, we can't just loop over all the products in a store.

Even though there is one global object that's called "all_products", 

it only helps to access individual products based on their handle. 
→ all_products["sunglasses-xyz"] for instance.


Every store has a hidden collection called "all". As the name suggests, this collection also contains a list of all products. 

You can access the collection object in the following way:

 { { collections["all"] }}

-->
  

<!-- 
a.)  Create an <ul> element with a css class of "product-list", that holds all the existing product titles as individual list items. 

Within the list items, wrap the title into a h4-element

-->
  


<!--
b.) Before putting out a product title check the availability of the product.

If it's unavailable, don't show it.

(you can test this by editing one of the products -> check the checkbox to track the quantity -> set the quantity to 0 -> this product is now unavailable)
-->


  
<!--
c.) Display the product image (featured image / first image) above the title, but still within the list items.

The images should be rendered with a 200px width.

Hint: You will need to use an image url filter.

--> 

  

  
  
 
<!--
d.) Add a button to view the product page below the title.

You can use an a-tag with the css class "btn" as button.

-->
  

  
  
  
<!--
e.) Add a second button, to immediatley add the product to the cart.

Hint:
The easiest way of adding a product to the cart is by clicking a link that points to:
/cart/add?id=1234

Hereby the ID referes to the corresponding variant ID.
It's important to note that the variant-ID is different from the overall product-ID.

Let me explain:
Every product has at least one variant. 
Even if we don't have further colors or size-options to choose from.

In that case, the hidden variant represents the product itself, but the variant-ID is still different form the product-ID.

You may want to take a look at the product object and a property called "first_available_variant".
-->  
  
  


<!-- End Challenge 7 -->
</section>
{%endcomment%}






{%comment%}
<section>
<!-- Challenge 8 -->

<!-- 
I've been trying to implement a new feature on the store but couldn't get it to work.
Could you take a look at my script and try to get it to work?


The feature should work as follows:
The client wants to have a "see on instagram"-button for some of his products.
On the backend he is able to add different tags to his products.
When he adds a tag in the format of "instagram_link:url-to-instagram-page",
the "see-on-instagram" button should be visible and the URL should be extracted from the tag.

I have no idea why the button is currently not showing up.
When I had it showing, the url wasn't correct either.

Hope you can help me to fix this.
 -->
   
<!--
For this challenge we need a bit of fictional product data (you can ignore this).
  {% assign fictional_product_title = "Yellow Dress" %}
  {% assign fictional_product_image = "http://lorempixel.com/124/125/fashion/1/" %}
  
  {% assign fictional_tags_string = "women,summer,instagram_link:https://www.instagram.com/shopify/,sale,new_arivals"%}
  {% assign fictional_product_tags = fictional_tags_string | split:',' %}
-->
  

  
  
  {% assign has_instagram_link = false %}
  
  
  {% for tag in fictional_product_tags %}
  
 
    {% if tag == 'instagram_link' %}
	
      {% assign has_instagram_link = true %}
  	  {% assign link = tag | split: ':'  %}
  	   
    {% endif%}
  
  {% endfor %}
  
  
  
  
  <div class="product-gallery">
  
  <img src="{{fictional_product_image}}" />
  <h6>{{fictional_product_title}}</h6>
  
    
   
  {% if has_instagram_link %}
  <a class="btn" href="{{link}}"> See on Instagram </a>
  {% endif %}
  
  </div>
  
  
  
  
  
  
<!-- End Challenge 8 -->
</section>
{%endcomment%}










{%comment%}
<section>
<!-- Challenge 9 -->

 
<!-- 
a.) Down below you can find a forloop that puts out 15 hello worlds.
	
	These tags should now have alternating colors. 
	1. red
	2. blue
	3. green
 	...repeat

	(you can add the css classes "red", "blue" or "green")

Find a simple way to assign these values respectively in our for loop.


Hint: Cycle-Tags


-->

{%comment%}
{% for i in (1..15) %}


<h6 class="">Hello World</h6>

{% endfor %}
{%endcomment%}

  
  
  
<!--
b.) 

(NOTE:PLS MAKE SURE TO VIEW THE MARKUP DOWN BELOW IN DESKTOP MODE / WIDTH)

More complex Markup may seem scary at first, but is actually not that different. 

The Markup down below puts out 3 images with text next to them. (Uncomment to see)

To create a more interesting layout, we want to swap the text and image position with each new row

image-left  &  text-right
text-left   &  image-right
image-left  &  text-right


To swap the elements we just have to add an additional css class to the "feature-row" div element.
That additonal css class is called "feature-row--reverse" and basically just reverses the flex direction.

So then it would be <div class="feature-row feature-row--reverse".

Use the Cycle tag to either add nothing, or the class "feature-row--reverse", depending on the current iteration.

-->


{%comment%}
{% for  i in (1..3) %}
  
<div class="shopify-section index-section">
    <div class="page-width">
        <div class="feature-row">
            <div class="feature-row__item">
                <div class="feature-row__image-wrapper js">
                    <div style="padding-top:66.640625%;">
                        <img class="feature-row__image"
                           {%if i == 1%}
                           src="//cdn.shopify.com/s/files/1/0514/8239/4791/files/blog_2_540x.jpg?v=1611745856"
                      	   {% elsif i == 2%}
                		   src="//cdn.shopify.com/s/files/1/0514/8239/4791/files/young-hip-woman-at-carnival_925x_4e9f7894-1b36-4c7e-88ca-9df9fd5c6c29_540x.jpg?v=1611246394"
 	                       {% elsif i == 3%}
                      	   src="//cdn.shopify.com/s/files/1/0514/8239/4791/files/young-female-models-denim_925x_2bf31250-01cc-48a4-b19d-e47e41555b6b_540x.jpg?v=1611246386"
                      	   {% endif %}
                          >   		
                    </div>
                </div>
            </div>
            <div class="feature-row__item feature-row__text feature-row__text--padding">
                <h3 class="h3">Text on the {%if i == 1%}right {%elsif i == 2%}left {%elsif i == 3%} right {%endif%} </h3>
                <div class="rte rte-setting featured-row__subtext">
                    <p>
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
                      Praesent elementum urna nisl, insuscipit odio pulvinar vel. Aliquam hendrerit, nibh tempus efficitur pulvinar, 
                      velit turpis accumsan augue, id semper mauris mi ac massa. 
                      Nunc accumsan mi vel felis faucibus, sit ametcon sectetur nulla varius. Donec et ultricies nunc.
                  </p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endfor %}
{%endcomment%}


<!-- End Challenge 9 -->
</section>
{%endcomment%}
  
  
  
  
  




{%comment%}
<section>
<!-- Challenge 10 -->
  
<!--
Lastly I'd like to introduce you to switch statements.
They basically work like if statements but have a slightly different syntax.

We oftentimes find them, when different elements are rendered based on an input.


Create a "case" for the element-type variable.

When it is "h6" put out "<h6>You can do this!</h6>"
When it is "h4" put out "<h4>You are a Liquid pro! </h4>"
When it is "h2" put out "<h2>You're ready for the first projects! :-)</h2>


Test your switch statement, by removing the comment tags around the assignments one after the other.

{% assign element-type = "h6" %}
{%comment%} {% assign element-type = "h4" %} {%endcomment%}
{%comment%} {% assign element-type = "h2" %} {%endcomment%}
-->

  
  

  
<!-- Challenge 10 -->
 </section>
{%endcomment%}